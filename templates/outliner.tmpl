package $PACKAGE_NAME$;

import java.util.Stack;
import lpg.lpgjavaruntime.IToken;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.texteditor.AbstractTextEditor;
import org.eclipse.uide.core.ErrorHandler;
import org.eclipse.uide.defaults.DefaultOutliner;
import org.eclipse.uide.editor.UniversalEditor;
import org.eclipse.uide.parser.IParseController;

import $PARSER_PKG$.$CLASS_NAME_PREFIX$Parser;
import $AST_PKG$.*;

public class $CLASS_NAME_PREFIX$Outliner extends DefaultOutliner {
    Stack fItemStack= new Stack();

    private final class OutlineVisitor extends AbstractVisitor {

	public void unimplementedVisitor(String s) {
		// Sometimes useful for debugging
//	    System.out.println(s);
	}

//	public boolean visit(block n) {
//		fItemStack.push(createTopItem("Block", n));
//		return true;
//	}
//
//	public void endVisit(block n) {
//		fItemStack.pop();
//	}

	public boolean visit(declaration0 n) {
		fItemStack.push(createTopItem(n.getIDENTIFIER().getIToken().toString(), n));
		return true;
	}

	public boolean visit(assignment n) {
		fItemStack.push(createTopItem(n.getIDENTIFIER().getIToken().toString() + "=" + n.getexpression().toString(), n));
		return true;
	}
    }

    public TreeItem createTopItem(String label) {
	return createTopItem(label, null);
    }

    public TreeItem createTopItem(String label, $AST_NODE$ n) {
	TreeItem treeItem= new TreeItem(tree, SWT.NONE);
	treeItem.setText(label);
	treeItem.setImage($CLASS_NAME_PREFIX$Images.OUTLINE_ITEM_IMAGE);
	if (n != null)
	    treeItem.setData(n);
	return treeItem;
    }

    public TreeItem createSubItem(String label) {
        return createSubItem(label, null);
    }

    public TreeItem createSubItem(String label, $AST_NODE$ n) {
	TreeItem treeItem= new TreeItem((TreeItem) fItemStack.peek(), SWT.NONE);
	treeItem.setText(label);
        if (n != null)
            treeItem.setData(n);
	treeItem.setImage($CLASS_NAME_PREFIX$Images.OUTLINE_ITEM_IMAGE);
	return treeItem;
    }

    public void createOutlinePresentation(IParseController controller, int offset) {
//	fController= controller;
	try {
	    if (controller != null && tree != null) {
		if (!controller.hasErrors()) {
		    $AST_NODE$ root= ($AST_NODE$) controller.getCurrentAst();

		    if (root != null) {
			tree.setRedraw(false);
			tree.removeAll();
			fItemStack.clear();
			root.accept(new OutlineVisitor());
		    }
		}
//		tree.setSelection(new TreeItem[] { tree.getItem(new Point(0, 0)) });
	    }
	    //selectTreeItemAtTextOffset(offset);
	} catch (Throwable e) {
	    ErrorHandler.reportError("Could not generate outline", e);
	} finally {
	    if (tree != null)
		tree.setRedraw(true);
	}
    }

    public void setEditor(UniversalEditor editor) {
        System.out.println(editor.getTitle());
    }

    public void setTree(Tree tree) {
        super.setTree(tree);
	this.tree.addSelectionListener(new SelectionListener() {
	    public void widgetSelected(SelectionEvent e) {
		TreeItem ti= (TreeItem) e.item;
		Object data= ti.getData();

		if (data instanceof $AST_NODE$) {
		    $AST_NODE$ node= ($AST_NODE$) ti.getData();
		    IToken token= node.getLeftIToken();

		    IEditorPart activeEditor= PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
		    AbstractTextEditor textEditor= (AbstractTextEditor) activeEditor;

		    textEditor.selectAndReveal(token.getStartOffset(), token.getEndOffset()-token.getStartOffset()+1);
//		    textEditor.setFocus();
		}
	    }
	    public void widgetDefaultSelected(SelectionEvent e) { }
	});
    }
}
